//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 01/05/2015 14:35:36 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using fMessagingSystem.Entities;

namespace fMessagingSystem.Data
{
    /// <summary>
    /// FanikiwaMessages data access component. Manages CRUD operations for the FanikiwaMessages table.
    /// </summary>
    public partial class FanikiwaMessageDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the FanikiwaMessages table.
        /// </summary>
        /// <param name="fanikiwaMessage">A FanikiwaMessage object.</param>
        /// <returns>An updated FanikiwaMessage object.</returns>
        public FanikiwaDBMessage Create(FanikiwaDBMessage fanikiwaMessage)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.FanikiwaMessages ([MemberId], [SenderTelno], [CustomerTelno], [Command], [MessageType], [Status], [Body], [MessageDate], [AccountId], [StartDate], [EndDate], [Amount], [HM_Param], [BE_AccLabel], [ST_StartDate], [ST_EndDate], [OfferId], [Email], [Pwd], [NotificationMethod], [MO_Term], [MO_Interest], [CP_NewPassword], [CP_ConfirmPassword], [NationalID], [MpesaRef], [MpesaSentDate], [MpesaBal], [Exception]) " +
                "VALUES(@MemberId, @SenderTelno, @CustomerTelno, @Command, @MessageType, @Status, @Body, @MessageDate, @AccountId, @StartDate, @EndDate, @Amount, @HM_Param, @BE_AccLabel, @ST_StartDate, @ST_EndDate, @OfferId, @Email, @Pwd, @NotificationMethod, @MO_Term, @MO_Interest, @CP_NewPassword, @CP_ConfirmPassword, @NationalID, @MpesaRef, @MpesaSentDate, @MpesaBal, @Exception); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@MemberId", DbType.Int32, fanikiwaMessage.MemberId);
                db.AddInParameter(cmd, "@SenderTelno", DbType.String, fanikiwaMessage.SenderTelno);
                db.AddInParameter(cmd, "@CustomerTelno", DbType.String, fanikiwaMessage.CustomerTelno);
                db.AddInParameter(cmd, "@Command", DbType.String, fanikiwaMessage.Command);
                db.AddInParameter(cmd, "@MessageType", DbType.Int32, fanikiwaMessage.MessageType);
                db.AddInParameter(cmd, "@Status", DbType.String, fanikiwaMessage.Status);
                db.AddInParameter(cmd, "@Body", DbType.String, fanikiwaMessage.Body);
                db.AddInParameter(cmd, "@MessageDate", DbType.DateTime2, fanikiwaMessage.MessageDate);
                db.AddInParameter(cmd, "@AccountId", DbType.String, fanikiwaMessage.AccountId);
                db.AddInParameter(cmd, "@StartDate", DbType.DateTime2, fanikiwaMessage.StartDate);
                db.AddInParameter(cmd, "@EndDate", DbType.DateTime2, fanikiwaMessage.EndDate);
                db.AddInParameter(cmd, "@Amount", DbType.Currency, fanikiwaMessage.Amount);
                db.AddInParameter(cmd, "@HM_Param", DbType.String, fanikiwaMessage.HM_Param);
                db.AddInParameter(cmd, "@BE_AccLabel", DbType.String, fanikiwaMessage.BE_AccLabel);
                db.AddInParameter(cmd, "@ST_StartDate", DbType.DateTime2, fanikiwaMessage.ST_StartDate);
                db.AddInParameter(cmd, "@ST_EndDate", DbType.DateTime2, fanikiwaMessage.ST_EndDate);
                db.AddInParameter(cmd, "@OfferId", DbType.Int32, fanikiwaMessage.OfferId);
                db.AddInParameter(cmd, "@Email", DbType.String, fanikiwaMessage.Email);
                db.AddInParameter(cmd, "@Pwd", DbType.String, fanikiwaMessage.Pwd);
                db.AddInParameter(cmd, "@NotificationMethod", DbType.String, fanikiwaMessage.NotificationMethod);
                db.AddInParameter(cmd, "@MO_Term", DbType.Int32, fanikiwaMessage.MO_Term);
                db.AddInParameter(cmd, "@MO_Interest", DbType.Double, fanikiwaMessage.MO_Interest);
                db.AddInParameter(cmd, "@CP_NewPassword", DbType.String, fanikiwaMessage.CP_NewPassword);
                db.AddInParameter(cmd, "@CP_ConfirmPassword", DbType.String, fanikiwaMessage.CP_ConfirmPassword);
                db.AddInParameter(cmd, "@NationalID", DbType.String, fanikiwaMessage.NationalID);
                db.AddInParameter(cmd, "@MpesaRef", DbType.String, fanikiwaMessage.MpesaRef);
                db.AddInParameter(cmd, "@MpesaSentDate", DbType.DateTime2, fanikiwaMessage.MpesaSentDate);
                db.AddInParameter(cmd, "@MpesaBal", DbType.Currency, fanikiwaMessage.MpesaBal);
                db.AddInParameter(cmd, "@Exception", DbType.String, fanikiwaMessage.Exception);

                // Get the primary key value.
                fanikiwaMessage.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return fanikiwaMessage;
        }

        /// <summary>
        /// Updates an existing row in the FanikiwaMessages table.
        /// </summary>
        /// <param name="fanikiwaMessage">A FanikiwaMessage entity object.</param>
        public void UpdateById(FanikiwaDBMessage fanikiwaMessage)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.FanikiwaMessages " +
                "SET " +
                    "[MemberId]=@MemberId, " +
                    "[SenderTelno]=@SenderTelno, " +
                    "[CustomerTelno]=@CustomerTelno, " +
                    "[Command]=@Command, " +
                    "[MessageType]=@MessageType, " +
                    "[Status]=@Status, " +
                    "[Body]=@Body, " +
                    "[MessageDate]=@MessageDate, " +
                    "[AccountId]=@AccountId, " +
                    "[StartDate]=@StartDate, " +
                    "[EndDate]=@EndDate, " +
                    "[Amount]=@Amount, " +
                    "[HM_Param]=@HM_Param, " +
                    "[BE_AccLabel]=@BE_AccLabel, " +
                    "[ST_StartDate]=@ST_StartDate, " +
                    "[ST_EndDate]=@ST_EndDate, " +
                    "[OfferId]=@OfferId, " +
                    "[Email]=@Email, " +
                    "[Pwd]=@Pwd, " +
                    "[NotificationMethod]=@NotificationMethod, " +
                    "[MO_Term]=@MO_Term, " +
                    "[MO_Interest]=@MO_Interest, " +
                    "[CP_NewPassword]=@CP_NewPassword, " +
                    "[CP_ConfirmPassword]=@CP_ConfirmPassword, " +
                    "[NationalID]=@NationalID, " +
                    "[MpesaRef]=@MpesaRef, " +
                    "[MpesaSentDate]=@MpesaSentDate, " +
                    "[MpesaBal]=@MpesaBal, " +
                    "[Exception]=@Exception " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@MemberId", DbType.Int32, fanikiwaMessage.MemberId);
                db.AddInParameter(cmd, "@SenderTelno", DbType.String, fanikiwaMessage.SenderTelno);
                db.AddInParameter(cmd, "@CustomerTelno", DbType.String, fanikiwaMessage.CustomerTelno);
                db.AddInParameter(cmd, "@Command", DbType.String, fanikiwaMessage.Command);
                db.AddInParameter(cmd, "@MessageType", DbType.Int32, fanikiwaMessage.MessageType);
                db.AddInParameter(cmd, "@Status", DbType.String, fanikiwaMessage.Status);
                db.AddInParameter(cmd, "@Body", DbType.String, fanikiwaMessage.Body);
                db.AddInParameter(cmd, "@MessageDate", DbType.DateTime2, fanikiwaMessage.MessageDate);
                db.AddInParameter(cmd, "@AccountId", DbType.String, fanikiwaMessage.AccountId);
                db.AddInParameter(cmd, "@StartDate", DbType.DateTime2, fanikiwaMessage.StartDate);
                db.AddInParameter(cmd, "@EndDate", DbType.DateTime2, fanikiwaMessage.EndDate);
                db.AddInParameter(cmd, "@Amount", DbType.Currency, fanikiwaMessage.Amount);
                db.AddInParameter(cmd, "@HM_Param", DbType.String, fanikiwaMessage.HM_Param);
                db.AddInParameter(cmd, "@BE_AccLabel", DbType.String, fanikiwaMessage.BE_AccLabel);
                db.AddInParameter(cmd, "@ST_StartDate", DbType.DateTime2, fanikiwaMessage.ST_StartDate);
                db.AddInParameter(cmd, "@ST_EndDate", DbType.DateTime2, fanikiwaMessage.ST_EndDate);
                db.AddInParameter(cmd, "@OfferId", DbType.Int32, fanikiwaMessage.OfferId);
                db.AddInParameter(cmd, "@Email", DbType.String, fanikiwaMessage.Email);
                db.AddInParameter(cmd, "@Pwd", DbType.String, fanikiwaMessage.Pwd);
                db.AddInParameter(cmd, "@NotificationMethod", DbType.String, fanikiwaMessage.NotificationMethod);
                db.AddInParameter(cmd, "@MO_Term", DbType.Int32, fanikiwaMessage.MO_Term);
                db.AddInParameter(cmd, "@MO_Interest", DbType.Double, fanikiwaMessage.MO_Interest);
                db.AddInParameter(cmd, "@CP_NewPassword", DbType.String, fanikiwaMessage.CP_NewPassword);
                db.AddInParameter(cmd, "@CP_ConfirmPassword", DbType.String, fanikiwaMessage.CP_ConfirmPassword);
                db.AddInParameter(cmd, "@NationalID", DbType.String, fanikiwaMessage.NationalID);
                db.AddInParameter(cmd, "@MpesaRef", DbType.String, fanikiwaMessage.MpesaRef);
                db.AddInParameter(cmd, "@MpesaSentDate", DbType.DateTime2, fanikiwaMessage.MpesaSentDate);
                db.AddInParameter(cmd, "@MpesaBal", DbType.Currency, fanikiwaMessage.MpesaBal);
                db.AddInParameter(cmd, "@Exception", DbType.String, fanikiwaMessage.Exception);
                db.AddInParameter(cmd, "@Id", DbType.Int32, fanikiwaMessage.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the FanikiwaMessages table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.FanikiwaMessages " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the FanikiwaMessages table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A FanikiwaMessage object with data populated from the database.</returns>
        public FanikiwaDBMessage SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [MemberId], [SenderTelno], [CustomerTelno], [Command], [MessageType], [Status]" +
                        ", [Body], [MessageDate], [AccountId], [StartDate], [EndDate], [Amount], [HM_Param]" +
                        ", [BE_AccLabel], [ST_StartDate], [ST_EndDate], [OfferId], [Email], [Pwd], [NotificationMethod]" +
                        ", [MO_Term], [MO_Interest], [CP_NewPassword], [CP_ConfirmPassword], [NationalID], [MpesaRef]" +
                        ", [MpesaSentDate], [MpesaBal], [Exception] " +
                "FROM dbo.FanikiwaMessages  " +
                "WHERE [Id]=@Id ";

            FanikiwaDBMessage fanikiwaMessage = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new FanikiwaMessage
                        fanikiwaMessage = new FanikiwaDBMessage();

                        // Read values.
                        fanikiwaMessage.Id = base.GetDataValue<int>(dr, "Id");
                        fanikiwaMessage.MemberId = base.GetDataValue<int>(dr, "MemberId");
                        fanikiwaMessage.SenderTelno = base.GetDataValue<string>(dr, "SenderTelno");
                        fanikiwaMessage.CustomerTelno = base.GetDataValue<string>(dr, "CustomerTelno");
                        fanikiwaMessage.Command = base.GetDataValue<string>(dr, "Command");
                        fanikiwaMessage.MessageType = base.GetDataValue<int>(dr, "MessageType");
                        fanikiwaMessage.Status = base.GetDataValue<string>(dr, "Status");
                        fanikiwaMessage.Body = base.GetDataValue<string>(dr, "Body");
                        fanikiwaMessage.MessageDate = base.GetDataValue<DateTime>(dr, "MessageDate");
                        fanikiwaMessage.AccountId = base.GetDataValue<string>(dr, "AccountId");
                        fanikiwaMessage.StartDate = base.GetDataValue<DateTime>(dr, "StartDate");
                        fanikiwaMessage.EndDate = base.GetDataValue<DateTime>(dr, "EndDate");
                        fanikiwaMessage.Amount = base.GetDataValue<decimal>(dr, "Amount");
                        fanikiwaMessage.HM_Param = base.GetDataValue<string>(dr, "HM_Param");
                        fanikiwaMessage.BE_AccLabel = base.GetDataValue<string>(dr, "BE_AccLabel");
                        fanikiwaMessage.ST_StartDate = base.GetDataValue<DateTime>(dr, "ST_StartDate");
                        fanikiwaMessage.ST_EndDate = base.GetDataValue<DateTime>(dr, "ST_EndDate");
                        fanikiwaMessage.OfferId = base.GetDataValue<int>(dr, "OfferId");
                        fanikiwaMessage.Email = base.GetDataValue<string>(dr, "Email");
                        fanikiwaMessage.Pwd = base.GetDataValue<string>(dr, "Pwd");
                        fanikiwaMessage.NotificationMethod = base.GetDataValue<string>(dr, "NotificationMethod");
                        fanikiwaMessage.MO_Term = base.GetDataValue<int>(dr, "MO_Term");
                        fanikiwaMessage.MO_Interest = base.GetDataValue<double>(dr, "MO_Interest");
                        fanikiwaMessage.CP_NewPassword = base.GetDataValue<string>(dr, "CP_NewPassword");
                        fanikiwaMessage.CP_ConfirmPassword = base.GetDataValue<string>(dr, "CP_ConfirmPassword");
                        fanikiwaMessage.NationalID = base.GetDataValue<string>(dr, "NationalID");
                        fanikiwaMessage.MpesaRef = base.GetDataValue<string>(dr, "MpesaRef");
                        fanikiwaMessage.MpesaSentDate = base.GetDataValue<DateTime>(dr, "MpesaSentDate");
                        fanikiwaMessage.MpesaBal = base.GetDataValue<decimal>(dr, "MpesaBal");
                        fanikiwaMessage.Exception = base.GetDataValue<string>(dr, "Exception");
                    }
                }
            }

            return fanikiwaMessage;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the FanikiwaMessages table.
        /// </summary>
        /// <returns>A collection of FanikiwaMessage objects.</returns>		
        public List<FanikiwaDBMessage> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [MemberId], [SenderTelno], [CustomerTelno], [Command], [MessageType], [Status]" +
                        ", [Body], [MessageDate], [AccountId], [StartDate], [EndDate], [Amount], [HM_Param]" +
                        ", [BE_AccLabel], [ST_StartDate], [ST_EndDate], [OfferId], [Email], [Pwd], [NotificationMethod]" +
                        ", [MO_Term], [MO_Interest], [CP_NewPassword], [CP_ConfirmPassword], [NationalID], [MpesaRef]" +
                        ", [MpesaSentDate], [MpesaBal], [Exception] " +
                "FROM dbo.FanikiwaMessages ";

            List<FanikiwaDBMessage> result = new List<FanikiwaDBMessage>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new FanikiwaMessage
                        FanikiwaDBMessage fanikiwaMessage = new FanikiwaDBMessage();

                        // Read values.
                        fanikiwaMessage.Id = base.GetDataValue<int>(dr, "Id");
                        fanikiwaMessage.MemberId = base.GetDataValue<int>(dr, "MemberId");
                        fanikiwaMessage.SenderTelno = base.GetDataValue<string>(dr, "SenderTelno");
                        fanikiwaMessage.CustomerTelno = base.GetDataValue<string>(dr, "CustomerTelno");
                        fanikiwaMessage.Command = base.GetDataValue<string>(dr, "Command");
                        fanikiwaMessage.MessageType = base.GetDataValue<int>(dr, "MessageType");
                        fanikiwaMessage.Status = base.GetDataValue<string>(dr, "Status");
                        fanikiwaMessage.Body = base.GetDataValue<string>(dr, "Body");
                        fanikiwaMessage.MessageDate = base.GetDataValue<DateTime>(dr, "MessageDate");
                        fanikiwaMessage.AccountId = base.GetDataValue<string>(dr, "AccountId");
                        fanikiwaMessage.StartDate = base.GetDataValue<DateTime>(dr, "StartDate");
                        fanikiwaMessage.EndDate = base.GetDataValue<DateTime>(dr, "EndDate");
                        fanikiwaMessage.Amount = base.GetDataValue<decimal>(dr, "Amount");
                        fanikiwaMessage.HM_Param = base.GetDataValue<string>(dr, "HM_Param");
                        fanikiwaMessage.BE_AccLabel = base.GetDataValue<string>(dr, "BE_AccLabel");
                        fanikiwaMessage.ST_StartDate = base.GetDataValue<DateTime>(dr, "ST_StartDate");
                        fanikiwaMessage.ST_EndDate = base.GetDataValue<DateTime>(dr, "ST_EndDate");
                        fanikiwaMessage.OfferId = base.GetDataValue<int>(dr, "OfferId");
                        fanikiwaMessage.Email = base.GetDataValue<string>(dr, "Email");
                        fanikiwaMessage.Pwd = base.GetDataValue<string>(dr, "Pwd");
                        fanikiwaMessage.NotificationMethod = base.GetDataValue<string>(dr, "NotificationMethod");
                        fanikiwaMessage.MO_Term = base.GetDataValue<int>(dr, "MO_Term");
                        fanikiwaMessage.MO_Interest = base.GetDataValue<double>(dr, "MO_Interest");
                        fanikiwaMessage.CP_NewPassword = base.GetDataValue<string>(dr, "CP_NewPassword");
                        fanikiwaMessage.CP_ConfirmPassword = base.GetDataValue<string>(dr, "CP_ConfirmPassword");
                        fanikiwaMessage.NationalID = base.GetDataValue<string>(dr, "NationalID");
                        fanikiwaMessage.MpesaRef = base.GetDataValue<string>(dr, "MpesaRef");
                        fanikiwaMessage.MpesaSentDate = base.GetDataValue<DateTime>(dr, "MpesaSentDate");
                        fanikiwaMessage.MpesaBal = base.GetDataValue<decimal>(dr, "MpesaBal");
                        fanikiwaMessage.Exception = base.GetDataValue<string>(dr, "Exception");

                        // Add to List.
                        result.Add(fanikiwaMessage);
                    }
                }
            }

            return result;
        }
    }
}

