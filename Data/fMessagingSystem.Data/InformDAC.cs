//====================================================================================================
// Code generated with Momentum: DAC Gen (Build 2.5.4750.27570)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 08/11/2013 16:34:08 
//====================================================================================================
  
using System;
using System.Collections.Generic; 
using System.Collections.ObjectModel; 
using System.Configuration;
using System.Data;
using System.Data.Common;
using System.Diagnostics;
using System.Diagnostics.Tracing; 
using System.Linq;
using System.Runtime.Serialization; 
using System.Text;
using System.Threading.Tasks;
using fMessagingSystem.Entities;
using Microsoft.Practices.EnterpriseLibrary.Data;

namespace fMessagingSystem.Data
{
    /// <summary>
    /// InformMessage data access component. Manages CRUD operations for the InformDb table.
    /// </summary>
    public partial class InformDAC : DataAccessComponent
    {

        /// <summary>
        /// Inserts a new row in the InformDb table.
        /// </summary>
        /// <param name="accountType">A InformMessage object.</param>
        /// <returns>An updated InformDb object.</returns>
        public InformMessage Create(InformMessage informmessage)
        {
            DatabaseFactory.SetDatabaseProviderFactory(new DatabaseProviderFactory(), false);

            const string SQL_STATEMENT =
                "INSERT INTO dbo.InformDb ([AddressFrom], [AddressTo], [MessageDate], [Body], [Status], [MessageType], [MessageInformType], [Subject]) " +
                "VALUES(@AddressFrom, @AddressTo, @MessageDate, @Body, @Status, @MessageType, @MessageInformType, @Subject); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values. 
                db.AddInParameter(cmd, "@AddressFrom", DbType.String, informmessage.AddressFrom);
                db.AddInParameter(cmd, "@AddressTo", DbType.String, informmessage.AddressTo);
                db.AddInParameter(cmd, "@MessageDate", DbType.DateTime2, informmessage.MessageDate);
                db.AddInParameter(cmd, "@Body", DbType.String, informmessage.Body);
                db.AddInParameter(cmd, "@Status", DbType.String, informmessage.Status);
                db.AddInParameter(cmd, "@MessageType", DbType.String, informmessage.MessageType);
                db.AddInParameter(cmd, "@MessageInformType", DbType.String, informmessage.MessageInformType);
                db.AddInParameter(cmd, "@Subject", DbType.String, informmessage.Subject);

                // Get the primary key value.
                informmessage.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return informmessage;
        }


        /// <summary>
        /// Updates an existing row in the InformDb table.
        /// </summary>
        /// <param name="informmessage">A InformMessage entity object.</param>
        public void UpdateById(InformMessage informmessage)
        {
            DatabaseFactory.SetDatabaseProviderFactory(new DatabaseProviderFactory(), false);

            const string SQL_STATEMENT =
                "UPDATE dbo.InformDb " +
                "SET " +
                    "[AddressFrom]=@AddressFrom, " +
                    "[AddressTo]=@AddressTo, " +
                    "[MessageDate]=@MessageDate, " +
                    "[Body]=@Body, " +
                    "[Status]=@Status, " +
                    "[MessageType]=@MessageType, " +
                    "[MessageInformType]=@MessageInformType, " +
                    "[Subject]=@Subject " +
                    "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@AddressFrom", DbType.String, informmessage.AddressFrom);
                db.AddInParameter(cmd, "@AddressTo", DbType.String, informmessage.AddressTo);
                db.AddInParameter(cmd, "@MessageDate", DbType.DateTime2, informmessage.MessageDate);
                db.AddInParameter(cmd, "@Body", DbType.String, informmessage.Body);
                db.AddInParameter(cmd, "@Status", DbType.String, informmessage.Status);
                db.AddInParameter(cmd, "@MessageType", DbType.String, informmessage.MessageType);
                db.AddInParameter(cmd, "@MessageInformType", DbType.String, informmessage.MessageInformType);
                db.AddInParameter(cmd, "@Subject", DbType.String, informmessage.Subject);
                db.AddInParameter(cmd, "@Id", DbType.Int32, informmessage.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the InformDb table.
        /// </summary>
        /// <param name="memberId">A Id value.</param>
        /// <returns>A InformMessage object with data populated from the database.</returns>
        public InformMessage SelectById(int id)
        {
            const string SQL_STATEMENT =
                " SELECT * FROM dbo.InformDb  " +
                " WHERE [Id]=@Id ";

            InformMessage informmessage = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new InformMessage
                        informmessage = new InformMessage();

                        // Read values.
                        informmessage.Id = base.GetDataValue<int>(dr, "Id");
                        informmessage.AddressFrom = base.GetDataValue<string>(dr, "AddressFrom");
                        informmessage.AddressTo = base.GetDataValue<string>(dr, "AddressTo");
                        informmessage.MessageDate = base.GetDataValue<DateTime>(dr, "MessageDate");
                        informmessage.Body = base.GetDataValue<string>(dr, "Body");
                        informmessage.Status = base.GetDataValue<string>(dr, "Status");
                        informmessage.MessageType = base.GetDataValue<string>(dr, "MessageType");
                        informmessage.MessageInformType = base.GetDataValue<string>(dr, "MessageInformType");
                        informmessage.Subject = base.GetDataValue<string>(dr, "Subject");
                    }
                }
            }

            return informmessage;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the InformDb table.
        /// </summary>
        /// <returns>A collection of InformMessage objects.</returns>		
        public List<InformMessage> Select()
        {
            DatabaseFactory.SetDatabaseProviderFactory(new DatabaseProviderFactory(), false);

            const string SQL_STATEMENT =
                " SELECT * FROM dbo.InformDb ";

            List<InformMessage> result = new List<InformMessage>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        InformMessage informmessage = new InformMessage();
                        // Create a new InformMessage
                        informmessage = new InformMessage();

                        // Read values.
                        informmessage.Id = base.GetDataValue<int>(dr, "Id");
                        informmessage.AddressFrom = base.GetDataValue<string>(dr, "AddressFrom");
                        informmessage.AddressTo = base.GetDataValue<string>(dr, "AddressTo");
                        informmessage.MessageDate = base.GetDataValue<DateTime>(dr, "MessageDate");
                        informmessage.Body = base.GetDataValue<string>(dr, "Body");
                        informmessage.Status = base.GetDataValue<string>(dr, "Status");
                        informmessage.MessageType = base.GetDataValue<string>(dr, "MessageType");
                        informmessage.MessageInformType = base.GetDataValue<string>(dr, "MessageInformType");
                        informmessage.Subject = base.GetDataValue<string>(dr, "Subject");
                        // Add to List.
                        result.Add(informmessage);
                    }
                }
            }

            return result;
        }



    }
}