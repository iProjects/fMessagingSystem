//====================================================================================================
// Code generated with Velocity: SL Gen (Build 2.4.4750.27570)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 08/12/2013 14:37:30 
//====================================================================================================

using fMessagingSystem.Business;
using fMessagingSystem.Entities;
using fMessagingSystem.Framework;
using fMessagingSystem.Framework.ExceptionHandlers;
using fMessagingSystem.Framework.ExceptionTypes;
using fMessagingSystem.Services;
using fMessagingSystem.Services.Contracts;
using log4net;
using log4net.Config;
using Microsoft.Practices.EnterpriseLibrary.Common.Configuration;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Configuration;
using System.Diagnostics;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using System.Threading.Tasks;

using GsmComm.GsmCommunication;
using GsmComm.PduConverter;
using fCommon.Utility;

namespace fMessagingSystem.Services
{
    /// <summary>
    /// Email service component.
    /// </summary>
    /// 
    [ServiceBehavior(InstanceContextMode = InstanceContextMode.Single)]
    public class MessagingService : IMessagingService
    {
        private GsmCommMain sendingModem;
        private GsmCommMain receivingModem;

        public MessagingService(GsmCommMain sModem, GsmCommMain rModem)
        {
            DatabaseFactory.SetDatabaseProviderFactory(new DatabaseProviderFactory(), false);

            IConfigurationSource config = ConfigurationSourceFactory.Create();
            ExceptionPolicyFactory factory = new ExceptionPolicyFactory(config);
            Logger.SetLogWriter(new LogWriterFactory(config).Create(), false);
            ExceptionManager exManager = factory.CreateManager();
            ExceptionPolicy.SetExceptionManager(factory.CreateManager(), false);

            if (sModem == null)
            {
                Utils.ShowError(new Exception("sendingModem cannot be null"));
                //throw new ArgumentNullException("sendingModem");
            }
            else
            {
                sendingModem = sModem;
            }

            if (rModem == null)
            {
                Utils.ShowError(new Exception("receivingModem cannot be null"));
                //throw new ArgumentNullException("receivingModem");
            }
            else
            {
                receivingModem = rModem;
            }

        }
        
        public void ReadMessageFromModem()
        {
            throw new NotImplementedException();
        }

        public void SendEmail(string addressTo, string Body)
        {
            try
            {
                EmailComponent bc = new EmailComponent();
                bc.SendMessage(addressTo, Body);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("SendMessage"));
                }
            }
        }
        public void SendEmailExt(string addressTo, string addressFrom, string subject, string Body)
        {
            try
            {
                EmailComponent bc = new EmailComponent();
                bc.SendMessage(addressTo, addressFrom, subject, Body);
            }
            catch (Exception ex)
            {
                // TODO: Handle your exceptions here. Remove any try-catch blocks if you
                //       are not handling any exceptions. 

                bool rethrow = false;
                rethrow = BusinessLogicExceptionHandler.HandleException(ref ex);
                if (rethrow)
                {
                    CustomExpMsg customMsg = new CustomExpMsg(ex.Message);
                    throw new FaultException<CustomExpMsg>(customMsg,
                        new FaultReason(customMsg.ErrorMsg),
                        new FaultCode("SendMessage"));
                }
            }
        }
        public void SendEmailMessage(EmailMessage message)
        {
            SendEmailExt(message.addressTo, message.addressFrom, message.subject, message.body.ToString());
        }

        public void SendListMessage(List<Message> ms)
        {
            MessagerComponent mger = new MessagerComponent(sendingModem);
            mger.SendListMessage(ms);
        }

        public void SendMessage(Message m)
        {
            MessagerComponent mger = new MessagerComponent(sendingModem);
            mger.SendMessage(m);
        }

        public void SendSMSMessage(SMSMessage message)
        {
            MessagerComponent mger = new MessagerComponent(sendingModem);
            mger.SendSMS(message);
        }

        public void SendSms(string message, string addressTo)
        {
            MessagerComponent mger = new MessagerComponent(sendingModem);
            mger.SendSMS(message, addressTo);
        }
    }
}